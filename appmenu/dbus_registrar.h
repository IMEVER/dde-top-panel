/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusRegistrar -p dbus_registrar com.canonical.AppMenu.Registrar.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUS_REGISTRAR_H
#define DBUS_REGISTRAR_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QDBusAbstractInterface>
#include <QDBusPendingReply>
#include <QDBusReply>
#include <QDBusMetaType>
#include <QDebug>

struct MenuStruct{
    uint wId;
    QString service;
    QDBusObjectPath path;
    MenuStruct(){}
    MenuStruct(uint id, QString service, QDBusObjectPath path)
    {
        this->wId = id;
        this->service = service;
        this->path = path;
    }
};

typedef QList<MenuStruct> MenuList;

Q_DECLARE_METATYPE(MenuStruct)
Q_DECLARE_METATYPE(MenuList)

QDBusArgument &operator<<(QDBusArgument &argument, const MenuStruct &menuStruct);
const QDBusArgument &operator>>(const QDBusArgument &argument, MenuStruct &menuStruct);
QDebug operator<<(QDebug deg, const MenuStruct &menuStruct);

/*
 * Proxy class for interface com.canonical.AppMenu.Registrar
 */
class DBusRegistrar: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.canonical.AppMenu.Registrar"; }
    static inline const char *staticServiceName()
    { return "com.canonical.AppMenu.Registrar"; }
    static inline const char *staticPathName()
    { return "/com/canonical/AppMenu/Registrar"; }

public:
    DBusRegistrar(QObject *parent = nullptr);

    ~DBusRegistrar();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, QDBusObjectPath> GetMenuForWindow(uint window)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(window);
        return asyncCallWithArgumentList(QStringLiteral("GetMenuForWindow"), argumentList);
    }
    inline QDBusReply<QString> GetMenuForWindow(uint window, QDBusObjectPath &path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(window);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("GetMenuForWindow"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            path = qdbus_cast<QDBusObjectPath>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<MenuList> GetMenus()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetMenus"), argumentList);
    }

    inline QDBusPendingReply<> RegisterWindow(uint window_id, const QDBusObjectPath &menu_object_path)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(window_id) << QVariant::fromValue(menu_object_path);
        return asyncCallWithArgumentList(QStringLiteral("RegisterWindow"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterWindow(uint window_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(window_id);
        return asyncCallWithArgumentList(QStringLiteral("UnregisterWindow"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void WindowRegistered(uint window_id, const QString &service, const QDBusObjectPath &path);
    void WindowUnregistered(uint window_id);
};

namespace com {
  namespace canonical {
    namespace AppMenu {
      typedef ::DBusRegistrar Registrar;
    }
  }
}
#endif
