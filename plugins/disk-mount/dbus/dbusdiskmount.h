/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusDiskMount -p dbusdiskmount com.deepin.daemon.DiskMount.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSDISKMOUNT_H_1468893654
#define DBUSDISKMOUNT_H_1468893654

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "variant/diskinfo.h"

/*
 * Proxy class for interface com.deepin.daemon.DiskMount
 */
class DBusDiskMount: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.daemon.DiskMount")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString &prop, changedProps.keys()) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.DiskMount"; }

public:
    explicit DBusDiskMount(QObject *parent = 0);

    ~DBusDiskMount();

    Q_PROPERTY(DiskInfoList DiskList READ diskList NOTIFY DiskListChanged)
    inline DiskInfoList diskList() const
    { return qvariant_cast< DiskInfoList >(property("DiskList")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Eject(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Eject"), argumentList);
    }

    inline QDBusPendingReply<DiskInfoList> ListDisk()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ListDisk"), argumentList);
    }

    inline QDBusPendingReply<> Mount(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("Mount"), argumentList);
    }

    inline QDBusPendingReply<DiskInfo> QueryDisk(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("QueryDisk"), argumentList);
    }

    inline QDBusPendingReply<> Unmount(const QString &diskId)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(diskId);
        return asyncCallWithArgumentList(QStringLiteral("Unmount"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Changed(int in0, const QString &in1);
    void Error(const QString &uuid, const QString &info);
// begin property changed signals
void DiskListChanged();
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::DBusDiskMount DiskMount;
    }
  }
}
#endif
